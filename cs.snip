snippet if
alias condition-if
abbr if ( condition ) {}
	if ( ${1:#:condition} ) {
		${0:TARGET}
	}

snippet else
alias condition-else
abbr else {}
	else {
		${0:TARGET}
	}

snippet elseif
alias condition-else-if 
abbr else if ( condition ) {}
	else if ( ${1:#:condition} ) {
		${0:TARGET}
	}

snippet for
alias condition-for
abbr for () {}
	for ( int i = 0; i < ${1:#:condition}; i++ ) {
		${0:TARGET}
	}

snippet foreach
alias condition-foreach
abbr foreach () {}
	foreach ( ${1:#:type} ${2:#:instance} in ${3:#:Object} ) {
		${0:TARGET}
	}

snippet while
alias condition-while
abbr while ( condition ) {}
	while ( ${1:#:Condition} ) {
		${0:TARGET}
	}

snippet switch
alias condition-switch
abbr switch () {} 
	switch ( ${1:#:Variable} ) {
		case ${2:#:Condition}: 
			${0:TARGET}
			break;
	}

snippet case
alias condition-case
abbr case : break;
	case ${1:#:variable} :
		${0:TARGET}
		break;

snippet List
alias collection-list
abbr List< type > list = new List< type >();
	List< ${1:#:type} > ${2:#:name} = new List< ${0:TARGET} >();

snippet newList
alias collection-new-list
abbr new List< type >();
	List< ${0:TARGET} >();

snippet Stack
alias collection-stack
abbr Stack< type > stack = new Stack< type >();
	Stack< ${1:#:type} > ${2:#:name} = new Stack< ${3:#:type} >();

snippet newStack
alias collection-new-stack
abbr new Stack< type >();
	new Stack< ${0:TARGET} >();

snippet Dictionary
alias collection-dictionary
abbr Dictionary< type > dict = new Dictionary< type >();
	Dictionary< ${1:#:type}, ${2:#:type} > ${3:#:name} = new Dictionary< ${4:#:type}, ${0:TARGET} >();
	
snippet newDictionary
alias collection-new-dictionary
abbr new Dictionary< type >();
	new Dictionary< ${1:#:type} >();

snippet Debug.Log
alias log
abbr Debug.Log( "" )
	Debug.Log( "${1:#:Info}" );

snippet Debug.LogData
alias logData
abbr Debug.Log( "" )
	Debug.Log( "${1:#:Info}" + ${0:TARGET} );

snippet Debug.LogWarning
alias warn
abbr Debug.LogWarning( "" ) 
	Debug.LogWarning( "${1:#:Info}" );

snippet Debug.LogWarningData
alias warnData
abbr Debug.LogWarning( "" ) 
	Debug.LogWarning( "${1:#:Info}" + ${0:TARGET} );

snippet Debug.LogError
alias error
abbr Debug.LogError( "" ) 
	Debug.LogError( "${1:#:Info}" );

snippet Debug.LogErrorData
alias errorData
abbr Debug.LogError( "" ) 
	Debug.LogError( "${1:#:Info}" + ${0:TARGET} );

snippet Debug.LogException
alias exception
abbr Debug.LogException( "" ) 
	Debug.LogException( "${1:#:Info}" );

snippet Debug.LogExceptionData
alias exceptionData
abbr Debug.LogException( "" ) 
	Debug.LogException( "${1:#:Info}" + ${0:TARGET} );

snippet Awake
alias voidAwake
abbr void Awake () {}
	void Awake () {
		${0:TARGET}
	}

snippet Start
alias voidStart
abbr void Start () {}
	void Start () {
		${0:TARGET}
	}

snippet OnEnable
alias voidOnEnable
abbr void OnEnable () {}
	void OnEnable () {
		${0:TARGET}
	}

snippet FixedUpdate
alias voidFixedUpdate
abbr void FixedUpdate () {}
	void FixedUpdate () {
		${0:TARGET}
	}

snippet Update
alias voidUpdate
abbr void Update () {}
	void Update () {
		${0:TARGET}
	}

snippet LateUpdate
alias voidLateUpdate
abbr void LateUpdate () {}
	void LateUpdate () {
		${0:TARGET}
	}

snippet OnDisable
alias voidOnDisable
abbr void OnDisable () {}
	void OnDisable () {
		${0:TARGET}
	}

snippet OnDestroy
alias voidOnDestroy
abbr void OnDestroy () {}
	void OnDestroy () {
		${0:TARGET}
	}

snippet OnGUI
alias voidOnGUI
abbr void OnGUI () {}
	void OnGUI () {
		${0:TARGET}
	}

snippet OnCollisionEnter
alias voidOnCollisionEnter
abbr void OnCollisionEnter () {}
	void OnCollisionEnter () {
		${0:TARGET}
	}

snippet OnCollisionStay
alias voidOnCollisionStay
abbr void OnCollisionStay () {}
	void OnCollisionStay () {
		${0:TARGET}
	}

snippet OnCollisionExit
alias voidOnCollisionExit
abbr void OnCollisionExit () {}
	void OnCollisionExit () {
		${0:TARGET}
	}
	
snippet OnTriggerEnter
alias voidOnTriggerEnter
abbr void OnTriggerEnter () {}
	void OnTriggerEnter () {
		${0:TARGET}
	}

snippet OnTriggerStay
alias voidOnTriggerStayStay
abbr void OnTriggerStay () {}
	void OnTriggerStay () {
		${0:TARGET}
	}

snippet OnTriggerExit
alias voidOnTriggerExit
abbr void OnTriggerExit () {}
	void OnTriggerExit () {
		${0:TARGET}
	}

snippet OnApplicationFocus
alias voidOnApplicationFocus 
abbr void OnApplicationFocus () {}
	void OnApplicationFocus () {
		${0:TARGET}
	}

snippet OnApplicationPause
alias voidOnApplicationPause
abbr void OnApplicationPause () {}
	void OnApplicationPause () {
		${0:TARGET}
	}

snippet OnApplicationQuit
alias voidOnApplicationQuit
abbr void OnApplicationQuit () {}
	void OnApplicationQuit () {
		${0:TARGET}
	}

snippet IEnumerator
abbr IEnumerator name () {}
	IEnumerator ${1:#:name} () {
		${0:TARGET}
	}

snippet StartCoroutine
abbr StartCoroutine( "name" );
	StartCoroutine( "${0:TARGET}" );
	
snippet StopCoroutine
abbr StopCoroutine( "name" );
	StopCoroutine( "${0:TARGET}" );

snippet StopAllCoroutine
abbr StopAllCoroutine( "name" );
	StopAllCoroutine( "${0:TARGET}" );

snippet GetComponent
abbr GetComponent< component >();
	GetComponent< ${0:TARGET} >();

snippet GetComponents
abbr GetComponents< component >();
	GetComponents< ${0:TARGET} >();

snippet GetComponentInChildren
abbr GetComponentInChildren< component >();
	GetComponentInChildren< ${0:TARGET} >();

snippet GetComponentsInChildren
abbr GetComponentsInChildren< component >();
	GetComponentsInChildren< ${0:TARGET} >();

snippet Vector2
abbr Vector2 name = new Vector2( x, y );
	Vector2 ${1:#:name} = new Vector2( ${2:#:x}, ${3:#:y} );${0:TARGET}

snippet newVector2
abbr new Vector2( x, y )
	new Vector2( ${1:#:x}, ${1:#:y} )${0:TARGET}

snippet Vector3
abbr Vector3 name = new Vector3( x, y, z );
	Vector3 ${1:#:name} = new Vector3( ${2:#:x}, ${3:#:y}, ${4:#:z} );${0:TARGET}
	
snippet newVector3
abbr new Vector3( x, y, z )
	new Vector3( ${1:#:x}, ${2:#:y}, ${3:#:z} )${0:TARGET}

snippet Vector2.Distance
abbr Vector2.Distance( Vector2, Vector2 )
	Vector2.Distance( ${1:#:Vector2}, ${2:#:Vector2} )${0:TARGET}

snippet Vector3.Distance
abbr Vector3.Distance( Vector3, Vector3 )
	Vector3.Distance( ${1:#:Vector3}, ${2:#:Vector3} )${0:TARGET}

snippet Vector2.Lerp
abbr Vector2.Lerp( from, to, time )
	Vector2.Lerp( ${1:#:Vector2}, ${2:#:Vector2}, ${3:#:Time} )${0:TARGET}
	
snippet Vector3.Lerp
abbr Vector3.Lerp( from, to, time )
	Vector3.Lerp( ${1:#:Vector3}, ${2:#:Vector3}, ${3:#:Time} )${0:TARGET}

snippet Vector3.Slerp
abbr Vector3.Slerp( from, to, time )
	Vector3.Slerp( ${1:#:Vector3}, ${2:#:Vector3}, ${3:#:Time} )${0:TARGET}
	
snippet Vector2.zero
abbr Vector2.zero
	Vector2.zero

snippet Vector2.one
abbr Vector2.one
	Vector2.one

snippet Vector2.up
abbr Vector2.up
	Vector2.up

snippet Vector2.right
abbr Vector2.right
	Vector2.right

snippet Vector3.zero
abbr Vector3.zero
	Vector3.zero

snippet Vector3.one
abbr Vector3.one
	Vector3.one

snippet Vector3.up
abbr Vector3.up
	Vector3.up
	
snippet Vector3.down
abbr Vector3.down
	Vector3.down

snippet Vector3.right
abbr Vector3.right
	Vector3.right

snippet Vector3.left
abbr Vector3.left
	Vector3.left

snippet Vector3.forward
abbr Vector3.forward
	Vector3.forward

snippet Vector3.back
abbr Vector3.back
	Vector3.back

snippet Translate
abbr Transform.Translate( x, y, z )
	Translate( ${1:#:x}, ${2:#:y}, ${3:#:z} )

snippet Rotate
abbr Transform.Rotate( x, y, z )
	Rotate( ${1:#:x}, ${2:#:y}, ${3:#:z} )

snippet GetChild
abbr Transform.GetChild( int )
	GetChild( ${0:TARGET} )

snippet Find
abbr Transform.Find( int )
	Find( ${0:TARGET} )

snippet DetachChildren
abbr Transform.DetachChildren()
	DetachChildren()

snippet Time.time
abbr Time.time
	Time.time

snippet Time.fixedTime
abbr Time.fixedTime
	Time.fixedTime
	
snippet Time.deltaTime
abbr Time.deltaTime
	Time.deltaTime

snippet Time.fixedDeltaTime
abbr Time.fixedDeltaTime
	Time.fixedDeltaTime

snippet Time.timeScale
abbr Time.timeScale

snippet Rect
abbr Rect rect = new Rect( x, y, width, height )
	Rect ${1:#:name} = new Rect( ${2:#:x}, ${3:#:y}, ${4:#:width}, ${5:#:height} )${0:TARGET}

snippet newRect
abbr new Rect( x, y, width, height )
	new Rect( ${1:#:x}, ${2:#:y}, ${3:#:width}, ${4:#:height} )${0:TARGET}

snippet RectDynamic
abbr Rect rect = new Rect( ( Screen.width * percent ) - ( width * 0.5f ), ( Screen.height * percent ) - ( height * 0.5f ), width, height )
	Rect ${1:#:name} = new Rect( ( Screen.width * ${2:#:percent} ) - ( ${4:#:width} * 0.5f ), ( Screen.height * ${3:#:percent} ) - ( ${6:#:height} * 0.5f ), ${5:#:width}, ${7:#:height} )${0:TARGET}

snippet newRectDynamic
abbr new Rect( ( Screen.width * percent ) - ( width * 0.5f ), ( Screen.height * percent ) - ( height * 0.5f ), width, height )
	new Rect( ( Screen.width * ${1:#:percent} ) - ( ${3:#:width} * 0.5f ), ( Screen.height * ${2:#:percent} ) - ( ${5:#:height} * 0.5f ), ${4:#:width}, ${6:#:height} )${0:TARGET}

snippet GUI.Label
abbr GUI.Label( Rect, string )
	GUI.Label( ${1:#:Rect}, ${2:#:string} )${0:TARGET}

snippet GUI.Box
abbr GUI.Box( Rect, string )
	GUI.Box( ${1:#:rect}, ${2:#:string} )${0:TARGET}
	
snippet GUI.Button
abbr GUI.Button( Rect, string )
	GUI.Button( ${1:#:Rect}, ${2:#:string} )${0:TARGET}

snippet GUI.Button(Rect)
abbr GUI.Button( new Rect(), string )
	GUI.Button( new Rect( ${1:#:x}, ${2:#:y}, ${3:#:width}, ${4:#:height}, ${5:#:string} )${0:TARGET}

snippet GUI.Button(RectDynamic)
abbr GUI.Button( new DynamicRect(), string )
	GUI.Button( new Rect( ( Screen.width * ${1:#:percent} ) - ( ${3:#:width} * 0.5f ), ( Screen.height * ${2:#:percent} ) - ( ${5:#:height} * 0.5f ), ${4:#:width}, ${6:#:height} ), ${7:#:string} )${0:TARGET}

snippet GUILayout.Label
abbr GUILayout.Label( string )
	GUILayout.Label( ${0:TARGET} )
	
snippet GUILayout.Button
abbr GUILayout.Button( string )
	GUILayout.Label( ${0:TARGET} )

snippet EditorGUILayout.TextField
abbr EditorGUILayout.TextField( string, variable )
	EditorGUILayout.TextField( ${1:#:string, ${2:#:variable} )${0:TARGET}
